diff --git a/node_modules/youtubei.js/dist/src/core/Player.js b/node_modules/youtubei.js/dist/src/core/Player.js
index fb1cdfb..fe5b62b 100644
--- a/node_modules/youtubei.js/dist/src/core/Player.js
+++ b/node_modules/youtubei.js/dist/src/core/Player.js
@@ -30,15 +30,14 @@ export default class Player {
         if (!player_id)
             throw new PlayerError('Failed to get player id');
         // We have the player id, now we can check if we have a cached player.
-        if (cache) {
-            const cached_player = await Player.fromCache(cache, player_id);
-            if (cached_player) {
-                Log.info(TAG, 'Found up-to-date player data in cache.');
-                cached_player.po_token = po_token;
-                return cached_player;
-            }
+        const cached_player = await Player.fromCache(cache, player_id);
+        if (cached_player) {
+            Log.info(TAG, 'Found up-to-date player data in cache.');
+            cached_player.po_token = po_token;
+            return cached_player;
         }
         const player_url = new URL(`/s/player/${player_id}/player_ias.vflset/en_US/base.js`, Constants.URLS.YT_BASE);
+        this.player_url = player_url;
         Log.info(TAG, `Could not find any cached player. Will download a new player from ${player_url}.`);
         const player_res = await fetch(player_url, {
             headers: {
@@ -137,7 +136,17 @@ export default class Player {
         return url_components.toString();
     }
     static async fromCache(cache, player_id) {
-        const buffer = await cache.get(player_id);
+      try {
+        console.log(`[fakeMMKV] attempts to load from gh: ${player_id}`);
+
+        const getCachedPlayer = async () => {
+            const req = await fetch(`https://raw.githubusercontent.com/lovegaoshi/my-express-api/refs/heads/ghactions/cachedPlayers/${player_id}`);
+            if (req.ok) return req.arrayBuffer();
+            const req2 = await fetch(`https://ytb-cache.netlify.app/api?playerURL=${player_id}`);
+            if (req2.ok) return req2.arrayBuffer();
+            return cache.get(player_id);
+        }
+        const buffer = await getCachedPlayer();
         if (!buffer)
             return null;
         try {
@@ -153,7 +162,11 @@ export default class Player {
             Log.error(TAG, 'Failed to deserialize player data from cache:', e);
             return null;
         }
+    } catch (e) {
+        console.log('[fakeMMKV] failed to load from cache');
+        return null;
     }
+  }
     static async fromSource(player_id, sig_timestamp, cache, sig_sc, nsig_sc) {
         const player = new Player(player_id, sig_timestamp, sig_sc, nsig_sc);
         await player.cache(cache);
